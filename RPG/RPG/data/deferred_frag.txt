#version 130

uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D depth;
uniform sampler2DArray shadow;
uniform usampler2D stencil;
uniform sampler2D flat_stencil;

uniform mat4 proj;

uniform int nSplits;

uniform float zNear;
uniform float zFar;

uniform vec2 pixel;
uniform vec2 half_pixel;

uniform vec3 xn;
uniform vec3 yn;
uniform vec3 zn;

uniform int nLights;

uniform vec3 light_samples[128];

uniform vec4 fog_color;
uniform float fog_strength = 1.0 / 15000.0;

float bias;
float bias_off;

int split;

vec4 world;
vec4 sc;

const float M_PI = 3.14159265359;

float sample(vec2 co)
{
	vec2 lower = floor(co*pixel-0.5)+0.5;
	vec2 upper = lower+1.0;

	vec2 loff = co*pixel-lower;
	vec2 uoff = 1.0-loff;

	lower /= pixel;
	upper /= pixel;

	float illumination = 0.0;
	illumination += uoff.x*uoff.y*clamp((sc.z-texture(shadow, vec3(lower, split)).x+bias_off)*bias, 0.0, 1.0);
	illumination += loff.x*loff.y*clamp((sc.z-texture(shadow, vec3(upper, split)).x+bias_off)*bias, 0.0, 1.0);
	illumination += loff.x*uoff.y*clamp((sc.z-texture(shadow, vec3(vec2(upper.x, lower.y), split)).x+bias_off)*bias, 0.0, 1.0);
	illumination += uoff.x*loff.y*clamp((sc.z-texture(shadow, vec3(vec2(lower.x, upper.y), split)).x+bias_off)*bias, 0.0, 1.0);

	return illumination;
}

void main()
{
	vec4 tex_col = texture2D(diffuse, gl_TexCoord[0].xy);

	vec4 nor = texture2D(normal, gl_TexCoord[0].xy);

	float z = texture2D(depth, gl_TexCoord[0].xy).x;

	world = vec4(gl_TexCoord[0].x*2.0-1.0, gl_TexCoord[0].y*2.0-1.0, z*2.0-1.0, 1.0);

	world = proj * world;
	world /= world.w;

	vec3 world_norm = normalize(world.xyz);

	vec3 n = normalize(nor.xyz);

	tex_col.w *= length(n);

	vec4 final = vec4(0.0);

	//for (int i=0;i<nLights;++i)
	{
		float intensity;
		float og_intensity;
		float specular = 0.0;
		vec3 cd = normalize(gl_LightSource[0].position.xyz);
		intensity = dot(cd,n);
		float hvdot = max(dot(-world_norm, -cd+n*2*(intensity)), 0.0);
		specular = pow(hvdot, 128)*0;
		specular *= step(0.0, intensity);

		og_intensity = intensity;
		intensity = clamp(intensity, 0.0, 1.0);

		bias = -5.0*pixel.x;

		/*for (int j=nSplits;j>-1;--j)
		{
			sc = gl_TextureMatrix[j]*world;
			if (sc.x<1.0 && sc.x>0.0 && sc.y<1.0 && sc.y>0.0 && sc.z<1.0+1.0/bias && sc.z>0.0)
				split = j;
		}
		sc = gl_TextureMatrix[split]*world;*/

		//float illumination = sample(sc.xy);
		/*float total = 1.0;
		for (float d=0.0;d<M_PI;d+=M_PI/8.0)
		{
			illumination += sample(sc.xy + vec2(cos(d), sin(d)) / pixel * 2.0);//step((gl_TextureMatrix[split]*world).z, texture(shadow, vec3(sc.xy + vec2(cos(d), sin(d)) / 1024.0, split)).x);
			total += 1.0;
		}
		illumination /= total;
		illumination = max(0.0, sqrt(illumination)*4.0-3.0);*/

		//if (split>=nSplits)
			//illumination = 1.0;

		uvec4 stencil_sample = texture(stencil, gl_TexCoord[0].xy);
		vec4 flat_stencil_sample = texture(flat_stencil, gl_TexCoord[0].xy);
		float total_stencil = 0.0;
		for (int j = 0; j < 4; j++)
		{
			for (int i = 0; i < 32; i++)
			{
				total_stencil += float((stencil_sample[j] >> i) & 1u) * max(0.0, dot(n, light_samples[i + j * 32]));
			}
		}
		float illumination = total_stencil / 128.0;
		illumination *= min(1.0, max(0.0, 1.0 - flat_stencil_sample.x));

		intensity = illumination;

		intensity *= 0.9;
		intensity += 0.1;

		//intensity += dot(world_norm, n) * 0.2 + 0.2;

		specular *= step(0.5, illumination);

		vec3 color = vec3(intensity);
		color += vec3(specular);

		final += vec4(color * tex_col.xyz, tex_col.w);

		//final = vec4(vec3(texture(shadow, vec3(sc.xy, split)).x), 1.0);
		//final +=  vec4(stencil_sample.x / 16.0, stencil_sample.y / 16.0, 0.0, 0.0);
		//gl_FragColor = vec4(flat_stencil_sample.x / 4.0 + 0.5, 0.5, 0.5, 1.0);
	}
	float fog_weight = length(world) * fog_strength;
	fog_weight = exp(fog_weight)-1.0;
	fog_weight = min(fog_weight, 100.0);
	gl_FragColor = (final + fog_color*fog_weight)/(1.0+fog_weight);// * max(0.0, min(1.0, 1.0 - (length(world) - 200.0) / 50.0));
}