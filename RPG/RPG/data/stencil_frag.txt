#version 440

uniform sampler2D depth;

uniform float zNear;
uniform float zFar;

uniform vec2 pixel;

uniform mat4 proj;
uniform mat4 proj_inv;

uniform vec4 light;
uniform float lsize;

uniform vec3 light_samples[128];

in vec3 first_pos;
in vec3 second_pos;
in vec3 n_top;
in vec3 n_inner;
in vec3 n_outer;
in vec3 n_first;
in vec3 n_second;
in vec3 n_outer_first;
in vec3 n_outer_second;

layout (location=0) out uvec4 shadow_and;

void main()
{
	float z = texture2D(depth, vec2(gl_FragCoord.x * pixel.x, gl_FragCoord.y * pixel.y)).x;

	vec4 world = vec4(gl_FragCoord.x*pixel.x*2.0-1.0, gl_FragCoord.y*pixel.y*2.0-1.0, z+z*z*0.5*zNear/zFar, 1.0);

	world = proj_inv * world;
	world /= world.w;
	world.xyz /= 2.0;

	if (dot(n_inner, world.xyz - first_pos) < 0.0 || dot(n_outer, world.xyz - first_pos) > 0.0 || dot(n_outer_first, world.xyz - first_pos) > 0.0 || dot(n_outer_second, world.xyz - second_pos) > 0.0)
		discard;

	uint shadow[4] = uint[](0u, 0u, 0u, 0u);
	for (int j = 0; j < 4; j++)
	{
		for (int i = 0; i < 32; i++)
		{
			float t = (dot(first_pos, n_top) - dot(n_top, world.xyz)) / dot(n_top, light_samples[i + j * 32]);
			vec3 pos = world.xyz + light_samples[i + j * 32] * t;
			float a = step(dot(n_inner, pos - first_pos), 0.0);
			float b = step(dot(n_first, pos - first_pos), 0.0);
			float c = step(dot(n_second, pos - second_pos), 0.0);
			shadow[j] += uint(1.0 - a * b * c) << i;
		}
	}

	//shadow_and = uvec4(0u);
	shadow_and = uvec4(shadow[0], shadow[1], shadow[2], shadow[3]);
}