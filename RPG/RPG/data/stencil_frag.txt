#version 440

uniform sampler2D depth;
uniform usampler2D lookup;

uniform float zNear;
uniform float zFar;

uniform vec2 pixel;

uniform mat4 proj;
uniform mat4 proj_inv;

uniform vec4 light;
uniform vec4 light_x;
uniform vec4 light_y;
uniform float lsize;

uniform vec3 light_samples[128];

uniform vec2 noise_a;

float pi = 3.14159265359;

in vec3 first_pos;
in vec3 second_pos;
in vec3 third_pos;

in vec3 side_flat_first;
in vec3 side_flat_second;
in vec3 side_flat_third;

in vec3 n_mid_first;
in vec3 n_mid_second;
in vec3 n_mid_third;

in vec3 n_outer;
in vec3 n_inner;
in vec3 first_cap;
in vec3 second_cap;

out uvec4 shadow_and;

vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v) {
	const vec4 C = vec4(0.211324865405187, 0.366025403784439,
		-0.577350269189626, 0.024390243902439);
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	i = mod(i, 289.0);
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
	+ i.x + vec3(0.0, i1.x, 1.0 ));
	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
	dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

void main()
{
	float z = texture(depth, vec2(gl_FragCoord.x * pixel.x, gl_FragCoord.y * pixel.y)).x;

	vec4 world = vec4(gl_FragCoord.x*pixel.x*2.0-1.0, gl_FragCoord.y*pixel.y*2.0-1.0, z*2.0-1.0, 1.0);

	world = proj_inv * world;
	world /= world.w;

	if (dot(n_inner, world.xyz - first_pos) < 0 || dot(n_outer, world.xyz - first_pos) > 0 || dot(first_cap, world.xyz - first_pos) > 0 || dot(second_cap, world.xyz - second_pos) > 0)
		discard;

	float first_dot_f = dot(first_pos, side_flat_first);
	float second_dot_f = dot(second_pos, side_flat_first);
	float world_dot_f = dot(world.xyz, side_flat_first);
	world_dot_f = clamp((world_dot_f - first_dot_f) / (second_dot_f - first_dot_f), 0.0, 1.0);
	
	float second_dot_s = dot(second_pos, side_flat_second);
	float third_dot_s = dot(third_pos, side_flat_second);
	float world_dot_s = dot(world.xyz, side_flat_second);
	world_dot_s = clamp((world_dot_s - second_dot_s) / (third_dot_s - second_dot_s), 0.0, 1.0);
	
	float third_dot_t = dot(third_pos, side_flat_third);
	float first_dot_t = dot(first_pos, side_flat_third);
	float world_dot_t = dot(world.xyz, side_flat_third);
	world_dot_t = clamp((world_dot_t - third_dot_t) / (first_dot_t - third_dot_t), 0.0, 1.0);

	vec3 pos_first = first_pos + (second_pos - first_pos) * world_dot_f;
	vec3 pos_second = second_pos + (third_pos - second_pos) * world_dot_s;
	vec3 pos_third = third_pos + (first_pos - third_pos) * world_dot_t;

	vec3 rel_f = world.xyz - pos_first;
	vec3 rel_s = world.xyz - pos_second;
	vec3 rel_t = world.xyz - pos_third;

	float angle_f = atan(dot(light_x.xyz, n_mid_first), dot(light_y.xyz, n_mid_first));
	float dist_f = dot(n_mid_first, world.xyz - first_pos) / lsize / max(0.0, dot(rel_f, -light.xyz)) * 0.5 + 0.5;

	float angle_s = atan(dot(light_x.xyz, n_mid_second), dot(light_y.xyz, n_mid_second));
	float dist_s = dot(n_mid_second, world.xyz - second_pos) / lsize / max(0.0, dot(rel_s, -light.xyz)) * 0.5 + 0.5;

	float angle_t = atan(dot(light_x.xyz, n_mid_third), dot(light_y.xyz, n_mid_third));
	float dist_t = dot(n_mid_third, world.xyz - third_pos) / lsize / max(0.0, dot(rel_t, -light.xyz)) * 0.5 + 0.5;

	float noise = snoise(gl_FragCoord.xy + noise_a);

	uvec4 shadow = texture(lookup, vec2(angle_f / 2.0 / pi + noise, dist_f));
	shadow |= texture(lookup, vec2(angle_s / 2.0 / pi + noise, dist_s));
	shadow |= texture(lookup, vec2(angle_t / 2.0 / pi + noise, dist_t));

	/*uvec4 shadow = uvec4(0u, 0u, 0u, 0u);
	for (int j = 0; j < 4; j++)
	{
		for (int i = 0; i < 32; i++)
		{
			float t = (dot(first_pos, n_top) - dot(n_top, world.xyz)) / dot(n_top, light_samples[i + j * 32]);
			vec3 pos = world.xyz + light_samples[i + j * 32] * t;
			float a = step(dot(n_inner, pos - first_pos), 0.0);
			float b = step(dot(n_first, pos - first_pos), 0.0);
			float c = step(dot(n_second, pos - second_pos), 0.0);
			shadow[j] += uint(1.0 - a * b * c) << i;
		}
	}*/

	//if (shadow == uvec4(4294967295, 4294967295, 4294967295, 4294967295))
		//discard;

	//shadow_and = uvec4(0u);
	shadow_and = shadow;
}