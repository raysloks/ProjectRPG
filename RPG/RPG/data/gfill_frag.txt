#version 440

uniform sampler2D diffuse;
uniform usampler2D shadow;

uniform vec3 light_samples[128];

uniform int shadow_quality;

uniform vec3 light;
uniform vec3 light_color;
uniform vec3 fog_add;

uniform mat4 proj;
uniform mat4 proj_inv;

in vec4 position;
in vec2 texco;
in vec3 norm;

out vec4 final_color;

void main()
{
	vec3 n = normalize(norm);
	float intensity = dot(light, n);
	intensity = max(0.0, intensity);
	intensity = sqrt(intensity);
	
	if (shadow_quality == 2)
	{
		uvec4 stencil_sample = texture(shadow, position.xy/position.w * 0.5 + 0.5);
		float total_stencil = 0.0;
		for (int j = 0; j < 4; j++)
		{
			for (int i = 0; i < 32; i++)
			{
				total_stencil += float((stencil_sample[j] >> i) & 1u);
			}
		}
		intensity *= total_stencil / 128.0;
	}

	vec4 color = texture(diffuse, texco);

	vec3 world = vec3(proj_inv * position);

	vec3 pre_color = color.rgb * (light_color * intensity + vec3(0.1, 0.1, 0.2) * (1.0 + dot(normalize(world), n) * 0.5));
	pre_color += fog_add * length(world);
	final_color = vec4(pre_color, color.a);
}