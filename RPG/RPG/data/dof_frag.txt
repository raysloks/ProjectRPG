#version 440

uniform sampler2D diffuse;
uniform sampler2D depth;

uniform float zNear;
uniform float zFar;

uniform vec2 pixel;

uniform int max_kernel_size;

uniform float x_size;
uniform float y_size;

uniform vec2 noise_r;
uniform vec2 noise_g;
uniform vec2 noise_b;

uniform float alpha;

in vec2 texCoord;

out vec4 final_color;

vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v) {
	const vec4 C = vec4(0.211324865405187, 0.366025403784439,
		-0.577350269189626, 0.024390243902439);
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	i = mod(i, 289.0);
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
	+ i.x + vec3(0.0, i1.x, 1.0 ));
	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
	dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

void main()
{
	/*vec2 sobel = vec2(0.0);
	vec2 dag = vec2(0.0);
	for (int x=-1;x<=1;++x)
	{
		for (int y=-1;y<=1;++y)
		{
			float zn = texture(depth, texCoord+vec2(x*pixel.x, y*pixel.y)).x;
			sobel.x += zn * (x * (2.0 - abs(y)));
			sobel.y += zn * (y * (2.0 - abs(x)));
			dag.x += zn * ((-2.0 + 3.0 * abs(x)) * (2.0 - abs(y)));
			dag.x += zn * ((-2.0 + 3.0 * abs(y)) * (2.0 - abs(x)));
		}
	}*/
	
	vec3 tex_col = vec3(0.0);
	
	float samples = 0.0;
	for (float x=-0.5+x_size/2.0;x<=0.5;x+=x_size)
	{
		for (float y=-0.5+y_size/2.0;y<=0.5;y+=y_size)
		{
			float d = 1.0;
			tex_col += texture(diffuse, texCoord+vec2(x*pixel.x, y*pixel.y)).rgb*d;
			samples += d;
		}
	}
	tex_col /= samples;
	//tex_col = texture(diffuse, texCoord).rgb;
	tex_col = sqrt(tex_col);
	
	vec3 noise_value = vec3(snoise(noise_r + gl_FragCoord.xy) - snoise(-noise_r + gl_FragCoord.xy), snoise(noise_g + gl_FragCoord.xy) - snoise(-noise_g + gl_FragCoord.xy), snoise(noise_b + gl_FragCoord.xy) - snoise(-noise_b + gl_FragCoord.xy)) / 256.0;
	final_color = vec4(tex_col + noise_value, alpha);
}