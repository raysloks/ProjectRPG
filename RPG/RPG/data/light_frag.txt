#version 440

uniform sampler2D depth;
uniform sampler2D normal;

uniform mat4 proj_inv;

uniform int n_light;
uniform vec4[256] light;

in vec2 texCoord;

out vec4 final_color;

void main()
{
	float z = texture(depth, texCoord).x;

	vec4 world = vec4(texCoord * 2.0 - 1.0, z * 2.0 - 1.0, 1.0);

	world = proj_inv * world;
	world /= world.w;

	vec3 normal = texture(normal, texCoord).xyz;

	float total = 1.0;
	
	for (int i = 0; i < n_light; ++i)
	{
		vec3 dif = light[i].xyz - world.xyz;

		//dif = shape * dif;

		dif *= 5.0;

		float ldotn = dot(normalize(dif), normal) * 0.5 + 0.5;

		//float falloff = 1.0 - length(dif);
		//falloff = max(0.0, falloff);

		//float ao = falloff * falloff * ldotn;
	
		//total *= step(0.25, length(dif));
		//total *= max(0.0, 1.0 - ao);

		total *= 1.0 - 1.0 / (4.0 + dot(dif, dif)) * ldotn;
	}

	final_color = vec4(vec3(total), 1.0);
}