#version 440

out vec4 position;
out vec2 texco;
out vec3 norm;

layout(std430) buffer instance_data_transform
{
	mat4 instance_transform[];
};

layout(std430) buffer instance_data_frame
{
	float instance_frame[];
};

uniform sampler2D animation_data;

uniform mat4 transform;

in vec4 pos;
in vec3 normal;
in vec2 texCoord0;

in vec4 bones_index;
in vec4 bones_weight;

mat4 get_bone_transform(float index, float frame)
{
	return mat4(
	texture(animation_data, vec2(index, frame)),
	texture(animation_data, vec2(index, frame)),
	texture(animation_data, vec2(index, frame)),
	texture(animation_data, vec2(index, frame))
	);
}

void main()
{
	mat4 bone_transform = get_bone_transform(bones_index.x, instance_frame[gl_InstanceID]) * bones_weight.x;
	bone_transform += get_bone_transform(bones_index.y, instance_frame[gl_InstanceID]) * bones_weight.y;
	bone_transform += get_bone_transform(bones_index.z, instance_frame[gl_InstanceID]) * bones_weight.z;
	bone_transform += get_bone_transform(bones_index.w, instance_frame[gl_InstanceID]) * bones_weight.w;

	vec4 apos = pos;
	apos.x += mod(float(gl_InstanceID), 140.0);
	apos.y += float(gl_InstanceID / 140);
	apos.z -= 40.0;

	mat4 total_transform = mat4(1.0);// = bone_transform * instance_transform[gl_InstanceID];

	norm = (total_transform * vec4(normal, 0.0)).xyz;
	total_transform = transform * total_transform;
	texco = texCoord0;
	position = total_transform * apos;
	gl_Position = total_transform * apos;
}