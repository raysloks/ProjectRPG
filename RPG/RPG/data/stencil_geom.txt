#version 440

uniform mat4 proj;
uniform mat4 proj_inv;

uniform vec4 light;
uniform float lsize;

uniform int first;
uniform int second;
uniform int third;

layout(triangles) in;
layout(triangle_strip, max_vertices=8) out;

out vec3 first_pos;
out vec3 second_pos;
out vec3 third_pos;

out vec3 side_flat_first;
out vec3 side_flat_second;
out vec3 side_flat_third;

out vec3 n_mid_first;
out vec3 n_mid_second;
out vec3 n_mid_third;

out vec3 n_outer;
out vec3 n_inner;
out vec3 first_cap;
out vec3 second_cap;

void main()
{
	vec3 cd = -light.xyz;

	vec4 real[3];
	for (int i=0;i<3;i++)
	{
		real[i] = proj_inv * gl_in[i].gl_Position;
	}

	vec3 n = normalize(cross((real[1] - real[0]).xyz, (real[2] - real[0]).xyz));

	vec3 sides[3];
	sides[0] = normalize((real[1] - real[0]).xyz);
	sides[1] = normalize((real[2] - real[1]).xyz);
	sides[2] = normalize((real[0] - real[2]).xyz);

	vec3 side_n_flat[3];
	for (int i=0;i<3;i++)
	{
		side_n_flat[i] = normalize(cross(sides[i], cd));
	}

	vec3 n_out[3];
	vec3 n_in[3];
	for (int i=0;i<3;i++)
	{
		n_out[i] = cross(sides[i], normalize(cd + side_n_flat[i] * lsize));
		n_in[i] = cross(sides[i], normalize(cd - side_n_flat[i] * lsize));
	}

	vec3 flat_sides[3];
	for (int i=0;i<3;i++)
	{
		flat_sides[i] = normalize(cross(side_n_flat[i], cd));
	}
	
	vec3 cap_first = normalize(flat_sides[first] - cd * lsize);
	vec3 cap_second = normalize(-flat_sides[first] - cd * lsize);

	vec3 end_out_first = normalize(cross(cap_first, n_out[first]));
	vec3 end_out_second = normalize(cross(n_out[first], cap_second));
	vec3 end_in_first = normalize(cross(cap_first, n_in[first]));
	vec3 end_in_second = normalize(cross(n_in[first], cap_second));

	float extend = 1000.0;

	vec4 fin_out_first = proj * vec4(end_out_first, 0.0);//(real[first] + vec4(end_out_first, 0.0) * extend);
	vec4 fin_out_second = proj * vec4(end_out_second, 0.0);//(real[second] + vec4(end_out_second, 0.0) * extend);
	vec4 fin_in_first = proj * vec4(end_in_first, 0.0);//(real[first] + vec4(end_in_first, 0.0) * extend);
	vec4 fin_in_second = proj * vec4(end_in_second, 0.0);//(real[second] + vec4(end_in_second, 0.0) * extend);

	// && dot(end_out[first], n) > 0.0 && dot(end_out[second], n) > 0.0 && dot(end_in[first], n) > 0.0 && dot(end_in[second], n) > 0.0
	//if (abs(dot(cd, n)) > sin(atan(lsize)) && abs(dot(sides[first], normalize(cd))) < cos(atan(lsize)))
	if (dot(cd, n) > 0.0)
	{
		gl_Position = fin_out_first;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();

		gl_Position = gl_in[first].gl_Position;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();
		
		gl_Position = fin_out_second;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();

		gl_Position = gl_in[second].gl_Position;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();
		
		gl_Position = fin_in_second;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();

		gl_Position = gl_in[first].gl_Position;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();
		
		gl_Position = fin_in_first;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();
		
		gl_Position = fin_out_first;
		first_pos = real[first].xyz;
		second_pos = real[second].xyz;
		third_pos = real[third].xyz;
		side_flat_first = flat_sides[first];
		side_flat_second = flat_sides[second];
		side_flat_third = flat_sides[third];
		n_mid_first = side_n_flat[first];
		n_mid_second = side_n_flat[second];
		n_mid_third = side_n_flat[third];
		n_outer = n_out[first];
		n_inner = n_in[first];
		first_cap = cap_first;
		second_cap = cap_second;
		EmitVertex();
	}

	EndPrimitive();
}