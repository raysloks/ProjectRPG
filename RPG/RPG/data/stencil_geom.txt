#version 150

uniform mat4 proj;
uniform mat4 proj_inv;

uniform vec4 light;

uniform int first;
uniform int second;

layout(triangles) in;
layout(triangle_strip, max_vertices=4) out;

out vec3 tri_pos;
out vec3 side_n;
out vec3 out_n;
out vec3 in_n;
out vec3 first_end;
out vec3 second_end;

void main()
{
	vec3 cd = -light.xyz;

	vec4 real[3];
	for (int i=0;i<3;i++)
	{
		real[i] = proj_inv * gl_in[i].gl_Position;
	}

	vec3 n = normalize(cross((real[1] - real[0]).xyz, (real[2] - real[0]).xyz));

	vec3 sides[3];
	sides[0] = normalize((real[1] - real[0]).xyz);
	sides[1] = normalize((real[2] - real[1]).xyz);
	sides[2] = normalize((real[0] - real[2]).xyz);

	vec3 side_n_flat[3];
	for (int i=0;i<3;i++)
	{
		side_n_flat[i] = normalize(cross(sides[i], cd));
	}

	float lsize = 0.05;

	vec3 n_out[3];
	vec3 n_in[3];
	for (int i=0;i<3;i++)
	{
		n_out[i] = cross(sides[i], normalize(cd + side_n_flat[i] * lsize));
		n_in[i] = cross(sides[i], normalize(cd - side_n_flat[i] * lsize));
	}
	
	vec3 end_out[3];
	vec3 end_in[3];

	end_out[0] = cross(n_out[2], n_out[0]);
	end_out[1] = cross(n_out[0], n_out[1]);
	end_out[2] = cross(n_out[1], n_out[2]);

	end_in[0] = cross(n_in[2], n_in[0]);
	end_in[1] = cross(n_in[0], n_in[1]);
	end_in[2] = cross(n_in[1], n_in[2]);
	
	float ds = step(dot(n_out[first], real[first].xyz), 0.0);

	vec3 end_first = end_out[first] * ds + end_in[first] * (1.0 - ds);
	vec3 end_second = end_out[second] * ds + end_in[second] * (1.0 - ds);

	vec3 side = n_out[first] * ds + n_in[first] * (1.0 - ds);

	float extend = 5.0;

	if (dot(cd, n) > 0.0 && dot(end_first, n) > 0.0 && dot(end_second, n) > 0.0)
	{
		gl_Position = proj * (real[first] + vec4(end_first, 0.0) * extend);
		tri_pos = real[first].xyz;
		side_n = side;
		out_n = n_out[first];
		in_n = n_in[first];
		first_end = n_in[first];
		second_end = n_in[second];
		EmitVertex();

		gl_Position = gl_in[first].gl_Position;
		tri_pos = real[first].xyz;
		side_n = side;
		out_n = n_out[first];
		in_n = n_in[first];
		first_end = n_in[first];
		second_end = n_in[second];
		EmitVertex();
		
		gl_Position = proj * (real[second] + vec4(end_second, 0.0) * extend);
		tri_pos = real[second].xyz;
		side_n = side;
		out_n = n_out[first];
		in_n = n_in[first];
		first_end = n_in[first];
		second_end = n_in[second];
		EmitVertex();

		gl_Position = gl_in[second].gl_Position;
		tri_pos = real[second].xyz;
		side_n = side;
		out_n = n_out[first];
		in_n = n_in[first];
		first_end = n_in[first];
		second_end = n_in[second];
		EmitVertex();
	}

	EndPrimitive();
}